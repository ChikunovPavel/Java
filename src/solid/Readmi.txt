srp - Single Responsibility Principle (Принцип единственной ответственности)
    Данный принцип гласит: никогда не должно быть больше одной причины изменить класс.
       На каждый объект возлагается одна обязанность, полностью инкапсулированная в класс.
            Все сервисы класса направлены на обеспечение этой обязанности.

ocp - Open Closed Principle (Принцип открытости/закрытости).
    Этот принцип емко описывают так:
        программные сущности (классы, модули, функции и т.п.) должны быть открыты для расширения,
            но закрыты для изменения.

lsp - Liskov’s Substitution Principle (Принцип подстановки Барбары Лисков).
    Это вариация принципа открытости/закрытости, о котором говорилось ранее.
     Его можно описать так: объекты в программе можно заменить их наследниками без изменения свойств программы.
     Подклассы должны переопределять методы базового класса так, чтобы не нарушалась функциональность с точки зрения клиента.

isp - Interface Segregation Principle (Принцип разделения интерфейса).
    Характеризуется следующим утверждением: клиенты не должны быть вынуждены реализовывать методы, которые они не будут использовать.
    принцип разделения интерфейсов говорит о том, что слишком «толстые» интерфейсы необходимо разделять на более мелкие и специфические,
        чтобы клиенты мелких интерфейсов знали только о методах, необходимых в работе.
    В итоге, при изменении метода интерфейса не должны меняться клиенты, которые этот метод не используют.

dip -Dependency Inversion Principle (Принцип инверсии зависимостей).
    зависимости внутри системы строятся на основе абстракций. Модули верхнего уровня не зависят от модулей нижнего уровня.
    Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.
    Программное обеспечение нужно разрабатывать так,
        чтобы различные модули были автономными и соединялись друг с другом с помощью абстракции.

    
