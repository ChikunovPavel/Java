ООП - это

Абстрактный класс нужен, для того чтоб задать модель поведения для всех дочерних объектов
            (может иметь реализацию и не иметь абстрактных методов)
Интерфейс - это более строгий вариант абстрактного класса(методы могут быть только абстрактными)
            все методы интерфейса являются публичными по умолчанию
Переопределение - это перезапись нужна аннотация { @Override }

Класс это - программный код
Объект это - выполненная программа(объект присваиваться ссылочной переменной)
    Объект обладает
        Характеристиками (поля. атрибуты)
        Конструктор - делается для инициализации начального состояния, создания объекта с уже задаными значениями
                имеет имя класса
                не имеет возвращаемого значения
                если нет конструктора будет использован конструктор по умолчанию
                {конструкторы не наследуются, они вызываются по очереди от родительского к дочернему классу}
                Computer comp = new Computer();
                        1.создание переменной типа компьютер
                        2.создание объекта типа computer в памяти - new
                        3.присвоение переменной comp созданный объект
                        4.переменная комп ссылается на созданный объект (ссылочный тип)
                        запись объекта в память происходит во время выполнения программы, а не во время написания кода
        Getter and Setter
        Поведением       (методы)

Ключевые слова:
    this - ссылается на текущий объект
    super - ссылается на родительский объект
Static (не изменяемый)- создается загрузчиком классов VM там находятся все статические элементы, не объект
    статичному методу запрещено использовать не статичные переменные
    связан не с объектом, а с классом


Инкапсуляция - это сокрытие реализация от пользователя
Композиция(содержит) has-a - это Композиция — более строгий вариант агрегации. Известна также как агрегация по значению.
агрегация - это
Наследование(является)IS A - это (inheritance) — механизм, который позволяет описать новый класс на основе существующего (родительского).
    При этом свойства и функциональность родительского класса заимствуются новым классом.
    Модификаторы доступа:
        public - доступно с любого места для внешнего интерфейса
        protected - внутри пакета и в дочерних классах - чаще всего при наследовании
        private - доступно только внутри класса - для инкапсуляции
        (без модификатора) - доступен только внутри класса (не желательно)
Полиморфизм - это способность обрабатывать данные разных типов
              это способность определять переданный объект во время выполнения программы
                    может принимать разные формы
